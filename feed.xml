<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-10-03T13:54:00+02:00</updated><id>/</id><title type="html">memoriasIT</title><subtitle>Memorias de un Inform√°tico</subtitle><entry><title type="html">Managing Github Stars</title><link href="/Github-Stars" rel="alternate" type="text/html" title="Managing Github Stars" /><published>2018-10-03T10:00:00+02:00</published><updated>2018-10-03T10:00:00+02:00</updated><id>/Github-Stars</id><content type="html" xml:base="/Github-Stars">&lt;h2&gt;The problem&lt;/h2&gt;

&lt;p&gt;
If you are a someone who uses github stars a lot for getting inspiration or just stumble with a lot of interesting ideas you would probably have hundreds of stars.
&lt;/p&gt;

&lt;p&gt;The first idea I had was to create a database and manage the stars with tags, however, I thought that someone would have already done that, and that's where my adventure starts.&lt;/p&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://app.astralapp.com&quot;&gt;Astral&lt;/a&gt; is a free service that does basically what I just said, It syncs with your github account and is able to see your stars. &lt;br&gt;
There, you are able to use options such as search, tags...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/XQrUU6z.png&quot; alt=&quot;walking&quot;&gt;&lt;/p&gt;


&lt;p&gt;As you can see the website is very appealing and does everything I wanted: You have tags &lt;code&gt;(1)&lt;/code&gt;, you can see the repos whitout tags &lt;code&gt;(2)&lt;/code&gt;, you can see the readme in case you forgot what that repo was &lt;code&gt;(3)&lt;/code&gt; and it has a search functionality &lt;code&gt;(4)&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;But does it really do everything I wanted?&lt;/h2&gt;

&lt;p&gt;Not really... There is no share function, so what if we implement it ourselves? }:-)&lt;/p&gt;
&lt;p&gt;Astral let's you export your stars as a JSON, I thought that was great! Until I saw the format of the JSON&lt;/p&gt;

&lt;pre&gt;
        
&quot;2&quot;: {
    &quot;id&quot;: 1039967,
    &quot;user_id&quot;: 16684,
    &quot;repo_id&quot;: 30003816,
    &quot;notes&quot;: null,
    &quot;created_at&quot;: &quot;2018-08-16 08:53:14&quot;,
    &quot;updated_at&quot;: &quot;2018-08-16 08:53:14&quot;,
    &quot;autotagged_by_topic&quot;: 0,
    &quot;tags&quot;: [
        {
            &quot;id&quot;: 171370,
            &quot;user_id&quot;: 16684,
            &quot;name&quot;: &quot;unixporn&quot;,
            &quot;sort_order&quot;: 0,
            &quot;created_at&quot;: &quot;2018-08-16 08:53:00&quot;,
            &quot;updated_at&quot;: &quot;2018-09-12 18:41:06&quot;,
            &quot;slug&quot;: &quot;unixporn&quot;
        }
    ]
},

&lt;/pre&gt;

&lt;p&gt;Unless your friend has access to the github api and a lot of time to spare this is not a very convenient way to share your stars with your friends&lt;/p&gt;
&lt;p&gt;Let's fix that!&lt;/p&gt;

&lt;H2&gt;Solution to the solution!&lt;/H2&gt;
&lt;p&gt;Let's use python to read the JSON file and parse it to human readable data. &lt;br&gt;
We need to read the original astral JSON and get the repo name fore every repo id&lt;/p&gt;
&lt;p&gt;We are going to need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;json   : to navigate and parse the data (Astral and github api)&lt;/li&gt;
&lt;li&gt;urllib : to make requests and parse them&lt;/li&gt;
&lt;li&gt;pprint : jsons with normal print look awfull&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First of all we need to read the file, so we use the open() and close() functions:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Read File &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;json_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;json_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;p&gt;After that we need to create our output file and save our stars, we can easily do that with this little code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'OUTPUT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Request &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'https://api.github.com/repositories/'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;repo_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;?access_token=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Oauth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;JSON_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'replace'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSON_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; - &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSON_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;full_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
        &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSON_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;     (&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSON_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;html_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
        
&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First of all we create the file, then we do requests to the github api with the repo id. &lt;br&gt;
As we can see the repo id was found in &lt;code&gt;astraljson -&gt; x -&gt; repo_id &lt;/code&gt;. We also add a Oauth token for the github api because of api limitations (60 per day). &lt;/p&gt;

&lt;P&gt;You can get a oauth key here: &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;Github Tokens&lt;/a&gt; &lt;/P&gt;

&lt;p&gt;After that we decode the json file to utf-8 replacing whatever error we find and create a variable &lt;code&gt;out&lt;/code&gt; which holds the format for our output file.&lt;/p&gt;

&lt;p&gt;Finally we print the output to the terminal and to the file.&lt;/p&gt;

&lt;h2&gt;Taking it further&lt;/h2&gt;

&lt;p&gt;I also wanted to print the stars tagged with the &quot;unixporn&quot; tag, so I added a couple of lines to check that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;unixporn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I created a boolean called &lt;code&gt;found&lt;/code&gt; which is used later to determine if the current item needs to be printed or &lt;br&gt;
The output looks something like this:&lt;/p&gt;
&lt;pre&gt;
    
    vi3m - nejni-marji/vi3m :  A really basic tool to use vim-style chained keypresses in i3.     (https://github.com/nejni-marji/vi3m)
    powerlevel9k - bhilburn/powerlevel9k : The most awesome Powerline theme for ZSH around!     (https://github.com/bhilburn/powerlevel9k)
    dotfiles - SteffenC/dotfiles : None     (https://github.com/SteffenC/dotfiles)
    dotfiles - djsavvy/dotfiles : None     (https://github.com/djsavvy/dotfiles)

&lt;/pre&gt;

&lt;p&gt;And we can run the sort command and have something like:&lt;/p&gt;

&lt;pre&gt;
    
    art - gawlk/art : :art: A smart theme generator (https://github.com/gawlk/art)
    autorice - UltraNyan/autorice : Graphical utility to edit and manage your config files. (https://github.com/UltraNyan/autorice)
    bin - gawlk/bin : :pineapple: List of scripts that make my life much easier (https://github.com/gawlk/bin)

&lt;/pre&gt;
&lt;p&gt;If you want to see the full code you can check my github repo with the quick snippet! &lt;br&gt;
&lt;a href=&quot;https://github.com/memoriasIT/Astral-Github-Stars-Parser&quot;&gt;Github repository link&lt;/a&gt;
&lt;/p&gt;</content><author><name>memoriasIT</name></author><category term="github" /><category term="stars" /><summary type="html">The problem</summary></entry><entry><title type="html">Introduction to ARM</title><link href="/arm-intro" rel="alternate" type="text/html" title="Introduction to ARM" /><published>2018-09-25T10:00:00+02:00</published><updated>2018-09-25T10:00:00+02:00</updated><id>/arm-intro</id><content type="html" xml:base="/arm-intro">&lt;p&gt;
    ARM is a RISC (Reduced Instruction Set Computing) architecture.  &lt;br&gt;
    It operates with registers with a few instructions for loading and saving data from/to memory. 
&lt;/p&gt;
&lt;p&gt;
    ARM in comparison to other architectures such as x86, is simpler in general terms.&lt;br&gt;
    It also has other advantages such as better power consumption, more registers, and easier manufacture.&lt;br&gt;
    &lt;br&gt;
    All those advantages allow phone companies or similar use cases be interested in this architecture.&lt;br&gt;
    Both OS X and Android run ARM.&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;
    I myself have created an introductory course for ARM, as well as exercises for practicing.&lt;br&gt;
    In this github repo you will find all my videos:&lt;br&gt;
    &lt;a href=&quot;https://github.com/memoriasIT/ARM-VideoTutorials&quot;&gt;ARM VIDEOTUTORIALS&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
    And here the exercises for you to practice:&lt;br&gt;
    &lt;a href=&quot;https://github.com/memoriasIT/Assembly-Practice/tree/master/ARM%20Projects&quot;&gt;ARM EXERCISES&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
    Most exercises have their own video and are explained, so if you go straight for them and don't understand the code just search for the corresponding video.
    Here you have the first introductory video:
&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ZfWXKLYiDc4?rel=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;


&lt;h2 id=&quot;creatingfootnotes&quot;&gt;Example code&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;
        .data
        dato1:  .word 2	@ First value
        dato2:  .word 5	@ Second Value
        sum:    .word 0 @ Result
        
        .text
        .global main	        @ Set main as global so it can be called from outside
        main:	ldr r0, =dato1	@ Load the direction of the first value in r0
                ldr r1, [r0]	@ Load the first value in r1 (direction found in r0)
                ldr r0, =dato2	@ Load the direction of the 2nd value in r0
                ldr r2, [r0]	@ Load the second value in r2 (direction found in r0)
                add r0, r1, r2	@ Sum both registers and save in r0
                ldr r3, =sum	@ Load the direction of value in r3
                str r0, [r3]	@ Store the result (r0) to sum (direction found in r3)
        fin:	bx lr           @ End the program, go back to the code that called &quot;main&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you were able to follow with the comments you would see that all we are doing is calculating a sum in ARM.&lt;/p&gt;
&lt;p&gt;The code isn't actually very hard, but you must visualize some concepts first such as registers and have very clear that the &lt;b&gt;VALUE&lt;/b&gt; is not the &lt;b&gt;DIRECTION&lt;/b&gt; of a variable.&lt;/p&gt;

&lt;p&gt;You will be able to differentiate different parts in the code too: the &lt;code&gt;.data&lt;/code&gt;, and the &lt;code&gt;.text&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;All you find in the &lt;code&gt;.data&lt;/code&gt; is... well... basically data! They are the most similar concept to variables that we have in ARM.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; there are no variables as you know them from other languages, you have to work with registers&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#registers&quot; id=&quot;registers&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;. Here they act like references in memmory.&lt;/p&gt;

&lt;p&gt;On the other hand, there is the &lt;code&gt;.text&lt;/code&gt; part. There you will basically find the &quot;logic&quot; of the program. There are a lot of instructions but you always have the good old documentation to read what each one does. Here we don't do anything crazy, just:&lt;/p&gt;

&lt;ul&gt;
        &lt;li&gt;&lt;code&gt;ldr&lt;/code&gt;: LoaD Register --&gt; Loads from a register&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;add&lt;/code&gt;: ADDs two registers&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;str&lt;/code&gt;: SToRe --&gt; Stores a value in a register&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;bx&lt;/code&gt;: Branch and eXchange --&gt; Similar to a return in other languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well I think that would be enough for a quick introduction. If you want to know more about it you can always check my course on YouTube where I teach you a lot of interesting advices and concepts starting from the basics.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the post! :)&lt;/p&gt;

&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;register&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;You can imagine a register like box where you store &lt;a href=&quot;#register&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;</content><author><name>memoriasIT</name></author><category term="ARM" /><category term="Assembly" /><category term="Tutorial" /><summary type="html">ARM is a RISC (Reduced Instruction Set Computing) architecture. It operates with registers with a few instructions for loading and saving data from/to memory. ARM in comparison to other architectures such as x86, is simpler in general terms. It also has other advantages such as better power consumption, more registers, and easier manufacture. All those advantages allow phone companies or similar use cases be interested in this architecture. Both OS X and Android run ARM. I myself have created an introductory course for ARM, as well as exercises for practicing. In this github repo you will find all my videos: ARM VIDEOTUTORIALS And here the exercises for you to practice: ARM EXERCISES Most exercises have their own video and are explained, so if you go straight for them and don't understand the code just search for the corresponding video. Here you have the first introductory video:</summary></entry><entry><title type="html">Introduction to Machine Learning</title><link href="/intro-to-machine-learning" rel="alternate" type="text/html" title="Introduction to Machine Learning" /><published>2017-08-31T10:00:00+02:00</published><updated>2017-08-31T10:00:00+02:00</updated><id>/intro-to-machine-learning</id><content type="html" xml:base="/intro-to-machine-learning">&lt;p&gt;Machine learning has got a lot of popularity in our modern world due to the development
    of the internet, the storage of large amounts of data, etc. Most of
    the nowadays technologies are more or less related to the automation
    of learning, some examples could be spam detection, speech recognition,
    image classifying, and so on.&lt;/p&gt;
    
    &lt;p&gt;Machine learning itself is a subfield of computer science which allows computers to
    learn by themselves. The term was first coined in 1959 by IBM, however it never
    gained as much popularity as it has today.&lt;/p&gt;
    
    &lt;p&gt;Machine learning has probably earned that much popularity due to the
    fact that more data was created in the last 2 years than in the whole
    history, and also, that as we can see in top500.org the computers are
    exponentially getting better which allows us to execute more complex
    operations faster.&lt;/p&gt;
    
    &lt;p&gt;It is strictly related to
    several fields such as data analysis, data mining and maths. In order
    to fully understand machine learning, a basis of algebra and statistics
    is needed.
    Here, you can find several resources for learning algebra;
    https://my.mindnode.com/9GQnwWMBYXMe1XjUD8G21qpxiyz5B4MraPtL8xyy
    And here, for statistics:
    https://my.mindnode.com/7cSLjj5rauAnjWT1zHqEmqGkixvoVWaMz8C7Q2aW).&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TV9nQwF.png&quot; alt=&quot;XVOEjvl.png&quot; /&gt;&lt;/p&gt;
    
    &lt;p&gt;In machine learning we can classify the tasks into three categories,
    we will see examples of each of them.&lt;/p&gt;
    
    &lt;p&gt;Supervised learning: we provide some example inputs (called training data)
    and the desired outputs. The model has to make predictions while being
    trained and corrected if they are wrong. The training process will end
    whenever the desired level of accuracy is achieved.
    Some examples are Decision Trees and Logistic Regressions. Find more info
    about them here:
    https://www.analyticsvidhya.com/blog/2016/04/complete-tutorial-tree-based-modeling-scratch-in-python/
    https://en.wikipedia.org/wiki/Logistic_regression&lt;/p&gt;
    
    &lt;p&gt;Unsupervised learning: we can‚Äôt make predictions as we don‚Äôt know the 
    result. We can get the model by deducing structures found in the input data 
    where some general rules could be found. Some examples are K-means and 
    the Apriori algorithm. Find more info here:
    https://en.coursera.org/learn/machine-learning/lecture/93VPG/k-means-algorithm
    https://en.wikipedia.org/wiki/Apriori_algorithm&lt;/p&gt;
    
    &lt;p&gt;Semi-supervised learning: as you can imagine it‚Äôs just the combination 
    of supervised and unsupervised learning, you have a desired problem but
     the model has to learn the structures as well as making predictions. Some
     examples are classification and regression.
    https://en.wikipedia.org/wiki/Classification
    https://en.wikipedia.org/wiki/Regression_analysis&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/HKtMPm5.png&quot; alt=&quot;tQuwb4G.png&quot; /&gt;&lt;/p&gt;
    
    &lt;p&gt;An algorithm is a sequence of actions that will be performed in order.
     They can be used for calculation, data processing and automated 
    reasoning.
    For you to understand you can think of a recipe, you have several steps 
    that you have to complete in order.&lt;/p&gt;
    
    &lt;p&gt;When we get here things start to get a bit harder and if you want to 
    fully understand how everything works you will need to know algebra 
    and statistics, however, if you just want to have a general knowledge 
    and understand the basics you will be fine with this tut.&lt;/p&gt;
    
    &lt;p&gt;Algorithms can be divided by the learning style or the similarity in 
    form/function. Here we will categorize them by similarity (how they 
    work). I also have to say that this is a bit off sometimes as some 
    algorithms can be found in different categories depending on your source.&lt;/p&gt;
    
    &lt;p&gt;First of all I would like to show you a cheat sheet with the most 
    important algorithms that we will see:
    &lt;img src=&quot;http://i.imgur.com/v6zzgnT.png&quot; alt=&quot;v6zzgnT.png&quot; /&gt;
    Source: https://machinelearningmastery.com&lt;/p&gt;
    
    &lt;p&gt;Starting from the top we see the Deep Learning Algorithms, 
    they are used to create complex neural networks, most of the methods 
    are semi-supervised, large datasets are provided.
    Some important algorithms are the Deep Boltzmann Machine (DBM),
     the Deep Belief Networks (DBM), the Convolutional Neural Network (CNN) 
    and Stacked Auto-encoders.
    It is used a lot for computer vision and speech recognition, they excell
    in image, audio and text data. However, as they need a lot of data it is 
    not suitable for every possible scenario, they also require a lot of 
    computer resources.
    This is one of my favourites so you will probably see some tutorials in 
    the future if I manage to fight my laziness xD&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Trhb5Aq.png&quot; alt=&quot;Trhb5Aq.png&quot; /&gt;
    Source: https://catalystsecure.com&lt;/p&gt;
    
    &lt;p&gt;Neural networks are inspired by the structure of biological neural 
    networks, they are usually used for regression and classification problems 
    but they can be used in a million case scenarios. Neural networks and Deep 
    Learning are usually mixed up, if you want to take it easy you can imagine 
    that Deep Neural Networks are a more ‚Äúcomplex‚Äù Neural Network, they 
    have more layers and it is more efficient than the ‚Äúold-school‚Äù Neural Networks.
    Some important algorithms are Perceptron, Back-Propagation, The 
    Hopfield Network and the Radial Basis Function Network (RBFN).&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/lBg3qko.png&quot; alt=&quot;lBg3qko.png&quot; /&gt;
    Source: aircto.com&lt;/p&gt;
    
    &lt;p&gt;The next one that we find is Ensemble Methods (also known as 
    Classification Trees), classifiers are constructed and then new data 
    points are classified by taking a weighted vote of their predictions. 
    It‚Äôs like creating weaker models which are independently trained and 
    then combined together to make the final prediction.
    They perform well in practice, they are scalable and robust, they are 
    unlikely to overfit too (be trained too much). Some big algorithms are
    Random Forests and Gradient Boosted Regression Trees (GBRT).&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/CdQMDvQ.png&quot; alt=&quot;CdQMDvQ.png&quot; /&gt;
    Source: http://magizbox.com&lt;/p&gt;
    
    &lt;p&gt;In Regression Algorithms a relationship between variables is
    created and refined by measuring the error produced in the predictions 
    of the model. Some important ones are Linear regression and Logistic 
    Regression. You can find some examples of these types of regression here: 
    http://magizbox.com/training/machinelearning/site/model_regression/&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/TIcU6nM.png&quot; alt=&quot;TIcU6nM.png&quot; /&gt;
    Source: http://magizbox.com&lt;/p&gt;
    
    &lt;p&gt;Regularization is just an extension to the regression methods, the only
     difference is that it penalizes the models based on their complexity 
    favoring simpler models. They are better at generalizing. They are
    popular, powerful and simple. Some examples are Ridge Regression, 
    Least Absolute Shrinkage and Selection Operator (LASSO), Elastic Net 
    and Least-Angle Regression (LARS).&lt;/p&gt;
    
    &lt;p&gt;Clustering, like regression, describes the class of problem and class of methods.
    A set of objects is grouped in groups called clusters. Some examples are k-Means,
    k-Medians, Expectation Maximisation (EM) and Hierarchical Clustering.
    Here you can see an example of clustering with K-means: http://magizbox.com/training/machinelearning/site/model_clustering/&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/4MNW1BH.png&quot; alt=&quot;4MNW1BH.png&quot; /&gt;
    Source: http://www.kdnuggets.com&lt;/p&gt;
    
    &lt;p&gt;Dimensionally Reduction, like clustering methods, seeks and exploits
     the inherent structure in the data, however, this time it is unsupervised or 
    the data is described with less information. It is useful for visualizing data 
    or simplifying it (which can be later used in a supervised learning method). 
    Some examples are Principal component analysis (PCA), Kernel PCA,
     Graph-based kernel PCA, Linear discriminant analysis (LDA) and Generalized 
    discriminant analysis (GDA).
    &lt;img src=&quot;http://i.imgur.com/wM6TLuh.png&quot; alt=&quot;wM6TLuh.png&quot; /&gt;
    Source: http://www.bogotobogo.com&lt;/p&gt;
    
    &lt;p&gt;Association Rule Learning Algorithms are kind of self-explanatory, 
    they extract rules that best explain the relationship between variables in data. 
    These rules can discover important associations that can be exploited. There are 
    two very important algorithms in this category: The Apriori Algorithm and the Eclat 
    Algorithm.&lt;/p&gt;
    
    &lt;p&gt;Bayesian Algorithms: they use the Bayes‚Äô Theorem, it describes the probability
     of an event based on prior knowledge of conditions related to the event. Some 
    examples are Naive Bayes, Gaussian Naive Bayes, Multinomial Naive Bayes, 
    Averaged One-Dependence Estimators (AODE), Bayesian Belief Network (BBN) and 
    Bayesian Network (BN).&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ojyQZKp.png&quot; alt=&quot;ojyQZKp.png&quot; /&gt;
    Source: https://www.analyticsvidhya.com&lt;/p&gt;
    
    &lt;p&gt;In Decision Tree Algorithms the model is constructed by the decisions 
    taken which are based on the values of attributes in the data. The model 
    resembles a tree and includes all possible outcomes, consequences, resource 
    costs and utility.&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/omoPfYh.png&quot; alt=&quot;muAM0uE.png&quot; /&gt;
    Source: http://www.kdnuggets.com/&lt;/p&gt;
    
    &lt;p&gt;Finally we find Instance Based Algorithms; this learning model is a 
    decision problem with instances or examples of training data that are deemed 
    important or required to the model. They usually build up databases of example 
    data and then they are compared to new data using a similarity measure with 
    the aim of creating the best match and in conclusion the best prediction. They 
    are also called memory-based methods and winner-take-all methods. Some 
    examples are k-Nearest Neighbor (kNN), Learning Vector Quantization (LVQ), 
    Self-Organizing Map (SOM) and Locally Weighted Learning (LWL).&lt;/p&gt;
    
    &lt;p&gt;In a future tutorial I will tell you a methodology for choosing the best algorithm 
    for your problem, for now I would be happy if you understood everything.&lt;/p&gt;
    
    &lt;p&gt;Here you can download a pdf with most of the algorithms, it is pretty useful as
     it tells you the code in python and in R (however I know you guys and I‚Äôm sure 
    you will go straight for the python code hehe :P ). Note that it doesn‚Äôt use Tensorflow.
    https://discuss.analyticsvidhya.com/t/download-full-cheatsheet-on-machine-learning-algorithms/4063&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/GaclayZ.png&quot; alt=&quot;yizMpKj.png&quot; /&gt;&lt;/p&gt;
    
    &lt;p&gt;Last of all, I would like to introduce you to some tools/frameworks. I have to say
    that machine learning is a field which is experiencing a lot of big changes lately, 
    so please if you are reading this in the future bare with me and make a quick google 
    search to make sure this is still valid.&lt;/p&gt;
    
    &lt;p&gt;The best of all is that there are many open source software so you don‚Äôt have to 
    worry about payments. In my opinion the best tool at the moment is Tensorflow,
    however, here you can find more options for you to choose.&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/YPxOIVr.png&quot; alt=&quot;YPxOIVr.png&quot; /&gt;
    Tensorflow was developed by Google with its initial release in 2015. It is a very 
    powerful tool which has compatibility with most CPUs and GPUs. It supports
    python and C++.
    It is gaining a lot of popularity and the community is getting bigger and bigger everyday.
    You can easilly install it here: https://www.tensorflow.org/install/
    Here you can see the popularity that it has gained:
    &lt;img src=&quot;http://i.imgur.com/sg3pSH7.png&quot; alt=&quot;sg3pSH7.png&quot; /&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/bjcOMEE.png&quot; alt=&quot;bjcOMEE.png&quot; /&gt;
    Scikit-learn, another big framework doesn‚Äôt support GPUs and is not really suitable 
    for neural networks (also want to note that most of their features were implemented 
    into Tensorflow  ;) ). It is free and also works with python, you can get more info and 
    installation instructions in their website: http://scikit-learn.org/stable/index.html&lt;/p&gt;
    
    &lt;p&gt;Caffe
    Caffe is a big machine learning framework too, it‚Äôs written in c++ with a python interface.
     It is better suited for building applications (instead of Tensorflow which is developed for
     research and development). It‚Äôs not bad at all but I feel like Tensorflow is easier to use. This 
    is their homepage: http://caffe.berkeleyvision.org/&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/jzV6oUh.png&quot; alt=&quot;qSafFW8.png&quot; /&gt;
    Theano is one of the first frameworks created (it was created in 2007), it follows the 
    Tensorflow style, it does not support multi-GPU nor horizontal capabilities. It uses NumPy 
    to express computations. It is considered a low-end machine learnign frameworks but in 
    reality it‚Äôs is fast and flexible. Due to being old the docs are very well explained.
    Check it out here: http://deeplearning.net/software/theano/&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/xiaZq9p.png&quot; alt=&quot;xiaZq9p.png&quot; /&gt;
    Keras is object oriented and simple, it uses python and can be used with theano for best 
    performance (can be used with Tensorflow too but it doesn‚Äôt work that good).
    You can see a comparison of a sample of code of Keras with Tensorflow here:
    https://gist.github.com/ricgu8086/0ba44ce3aab19ec50425383a4d778b50
    For simple building get Keras, if you want more tweaks go to Tensorflow.
    Check it out here: https://keras.io/&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Uy00onV.png&quot; alt=&quot;Uy00onV.png&quot; /&gt;
    Torch is very famous too, however, it uses Lua, if you are into that go for it (it just 
    isn‚Äôt my case lol). It was used in facebook before they migrated to Tensorflow (if you 
    know what I mean).
    This is their website: http://torch.ch/&lt;/p&gt;
    
    &lt;p&gt;As you can see Tensorflow is the leading software now, it is one of the most powerful
     ones and not hard to master when you get the hang of it. Another big software is Keras, 
    if you just want to play around with deep learning it‚Äôs probably your option.&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/eWy9QyO.png&quot; alt=&quot;3ipRh6w.png&quot; /&gt;&lt;/p&gt;
    
    &lt;p&gt;Obviously this is just some theory; I plan on making more tutorials about machine 
    learning with real examples. However, if you are impatient I will leave you some good 
    links ;)&lt;/p&gt;
    
    &lt;p&gt;First of all we can find a defcon 25 talk where they apply machine learning for hacking, 
    it‚Äôs pretty interesting, in the talk they don‚Äôt explain anything about coding our model but 
    it will help you imagine how machine learning works better.
    https://www.youtube.com/watch?v=wbRx18VZlYA&lt;/p&gt;
    
    &lt;p&gt;Here you can find a lot of resources, there are books, websites, videos, etc.
    https://my.mindnode.com/k954FWFNztnkphWmNqqHz2dqQW41LeP1SLqkqqjs&lt;/p&gt;
    
    &lt;p&gt;I found out that a book that I am reading is free online, it‚Äôs not bad and it‚Äôs suitable 
    for university students. The online version is not exactly the same as the paper one, 
    but it is very useful.
    http://neuron.eng.wayne.edu/synapse2/tpage3.html&lt;/p&gt;
    
    &lt;p&gt;One of the most famous youtube channels about machine learning is Siraj Raval, he 
    studied computer science and works with python and TensorFlow, it‚Äôs a must-watch.
    https://www.youtube.com/channel/UCWN3xxRkmTPmbKwht9FuE5A&lt;/p&gt;
    
    &lt;p&gt;Sentdex is also a famous youtuber who makes coding videos, he also works with python,
     he has a very interesting project in my opinion: he made a car which drives itself in gta v 
    with machine learning (and he‚Äôs planning on adding even more AI to GTA so stay tunned guys haha).
    https://www.youtube.com/user/sentdex&lt;/p&gt;
    
    &lt;p&gt;This is one of my favourites youtubers, Carykh is a bit underrated and he should have way
     more subscribers in my opinion. Check him out and give it a follow, his videos are very 
    interesting and very well made :)
    https://www.youtube.com/user/carykh&lt;/p&gt;
    
    &lt;p&gt;There are way more videos and youtubers online but I think that with these links you can
    already have some fun!
    Hope you liked the tutorial and have fun :)&lt;/p&gt;
    
    &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/UBAPtJN.png&quot; alt=&quot;YjktbpY.png&quot; /&gt;&lt;/p&gt;
    
    &lt;p&gt;https://www.analyticsvidhya.com/blog/2015/08/common-machine-learning-algorithms/&lt;/p&gt;
    
    &lt;p&gt;https://machinelearningmastery.com/a-tour-of-machine-learning-algorithms/&lt;/p&gt;
    
    &lt;p&gt;https://en.wikipedia.org/wiki/Machine_learning&lt;/p&gt;
    
    &lt;p&gt;https://my.mindnode.com/k954FWFNztnkphWmNqqHz2dqQW41LeP1SLqkqqjs&lt;/p&gt;
    
    &lt;p&gt;https://www.codeproject.com/Articles/1104747/Introduction-to-Genetic-Algorithms-with-Python-Hel&lt;/p&gt;
    
    &lt;p&gt;https://www.analyticsvidhya.com/blog/2016/04/complete-tutorial-tree-based-modeling-scratch-in-python/&lt;/p&gt;
    
    &lt;p&gt;https://en.wikipedia.org/wiki/Logistic_regression&lt;/p&gt;
    
    &lt;p&gt;https://en.coursera.org/learn/machine-learning/lecture/93VPG/k-means-algorithm&lt;/p&gt;
    
    &lt;p&gt;https://en.wikipedia.org/wiki/Apriori_algorithm&lt;/p&gt;
    
    &lt;p&gt;https://en.wikipedia.org/wiki/Classification&lt;/p&gt;
    
    &lt;p&gt;https://en.wikipedia.org/wiki/Regression_analysis&lt;/p&gt;
    
    &lt;p&gt;http://bigdata-madesimple.com/top-10-machine-learning-frameworks/&lt;/p&gt;
    
    &lt;p&gt;https://catalystsecure.com/blog/2017/07/deep-learning-in-e-discovery-moving-past-the-hype/&lt;/p&gt;
    
    &lt;p&gt;https://aircto.com/blog/everything-you-need-to-know-about-artificial-neural-network-deep-learning-part-i/&lt;/p&gt;
    
    &lt;p&gt;http://magizbox.com/training/machinelearning/site/ensemble/&lt;/p&gt;
    
    &lt;p&gt;http://www.kdnuggets.com/2016/08/10-algorithms-machine-learning-engineers.html/2&lt;/p&gt;
    
    &lt;p&gt;https://elitedatascience.com/machine-learning-algorithms&lt;/p&gt;
    
    &lt;p&gt;https://www.analyticsvidhya.com/blog/2015/09/naive-bayes-explained/&lt;/p&gt;</content><author><name>memoriasIT</name></author><category term="Machine Learning" /><summary type="html">Machine learning has got a lot of popularity in our modern world due to the development of the internet, the storage of large amounts of data, etc. Most of the nowadays technologies are more or less related to the automation of learning, some examples could be spam detection, speech recognition, image classifying, and so on. Machine learning itself is a subfield of computer science which allows computers to learn by themselves. The term was first coined in 1959 by IBM, however it never gained as much popularity as it has today. Machine learning has probably earned that much popularity due to the fact that more data was created in the last 2 years than in the whole history, and also, that as we can see in top500.org the computers are exponentially getting better which allows us to execute more complex operations faster. It is strictly related to several fields such as data analysis, data mining and maths. In order to fully understand machine learning, a basis of algebra and statistics is needed. Here, you can find several resources for learning algebra; https://my.mindnode.com/9GQnwWMBYXMe1XjUD8G21qpxiyz5B4MraPtL8xyy And here, for statistics: https://my.mindnode.com/7cSLjj5rauAnjWT1zHqEmqGkixvoVWaMz8C7Q2aW). In machine learning we can classify the tasks into three categories, we will see examples of each of them. Supervised learning: we provide some example inputs (called training data) and the desired outputs. The model has to make predictions while being trained and corrected if they are wrong. The training process will end whenever the desired level of accuracy is achieved. Some examples are Decision Trees and Logistic Regressions. Find more info about them here: https://www.analyticsvidhya.com/blog/2016/04/complete-tutorial-tree-based-modeling-scratch-in-python/ https://en.wikipedia.org/wiki/Logistic_regression Unsupervised learning: we can‚Äôt make predictions as we don‚Äôt know the result. We can get the model by deducing structures found in the input data where some general rules could be found. Some examples are K-means and the Apriori algorithm. Find more info here: https://en.coursera.org/learn/machine-learning/lecture/93VPG/k-means-algorithm https://en.wikipedia.org/wiki/Apriori_algorithm Semi-supervised learning: as you can imagine it‚Äôs just the combination of supervised and unsupervised learning, you have a desired problem but the model has to learn the structures as well as making predictions. Some examples are classification and regression. https://en.wikipedia.org/wiki/Classification https://en.wikipedia.org/wiki/Regression_analysis An algorithm is a sequence of actions that will be performed in order. They can be used for calculation, data processing and automated reasoning. For you to understand you can think of a recipe, you have several steps that you have to complete in order. When we get here things start to get a bit harder and if you want to fully understand how everything works you will need to know algebra and statistics, however, if you just want to have a general knowledge and understand the basics you will be fine with this tut. Algorithms can be divided by the learning style or the similarity in form/function. Here we will categorize them by similarity (how they work). I also have to say that this is a bit off sometimes as some algorithms can be found in different categories depending on your source. First of all I would like to show you a cheat sheet with the most important algorithms that we will see: Source: https://machinelearningmastery.com Starting from the top we see the Deep Learning Algorithms, they are used to create complex neural networks, most of the methods are semi-supervised, large datasets are provided. Some important algorithms are the Deep Boltzmann Machine (DBM), the Deep Belief Networks (DBM), the Convolutional Neural Network (CNN) and Stacked Auto-encoders. It is used a lot for computer vision and speech recognition, they excell in image, audio and text data. However, as they need a lot of data it is not suitable for every possible scenario, they also require a lot of computer resources. This is one of my favourites so you will probably see some tutorials in the future if I manage to fight my laziness xD Source: https://catalystsecure.com Neural networks are inspired by the structure of biological neural networks, they are usually used for regression and classification problems but they can be used in a million case scenarios. Neural networks and Deep Learning are usually mixed up, if you want to take it easy you can imagine that Deep Neural Networks are a more ‚Äúcomplex‚Äù Neural Network, they have more layers and it is more efficient than the ‚Äúold-school‚Äù Neural Networks. Some important algorithms are Perceptron, Back-Propagation, The Hopfield Network and the Radial Basis Function Network (RBFN). Source: aircto.com The next one that we find is Ensemble Methods (also known as Classification Trees), classifiers are constructed and then new data points are classified by taking a weighted vote of their predictions. It‚Äôs like creating weaker models which are independently trained and then combined together to make the final prediction. They perform well in practice, they are scalable and robust, they are unlikely to overfit too (be trained too much). Some big algorithms are Random Forests and Gradient Boosted Regression Trees (GBRT). Source: http://magizbox.com In Regression Algorithms a relationship between variables is created and refined by measuring the error produced in the predictions of the model. Some important ones are Linear regression and Logistic Regression. You can find some examples of these types of regression here: http://magizbox.com/training/machinelearning/site/model_regression/ Source: http://magizbox.com Regularization is just an extension to the regression methods, the only difference is that it penalizes the models based on their complexity favoring simpler models. They are better at generalizing. They are popular, powerful and simple. Some examples are Ridge Regression, Least Absolute Shrinkage and Selection Operator (LASSO), Elastic Net and Least-Angle Regression (LARS). Clustering, like regression, describes the class of problem and class of methods. A set of objects is grouped in groups called clusters. Some examples are k-Means, k-Medians, Expectation Maximisation (EM) and Hierarchical Clustering. Here you can see an example of clustering with K-means: http://magizbox.com/training/machinelearning/site/model_clustering/ Source: http://www.kdnuggets.com Dimensionally Reduction, like clustering methods, seeks and exploits the inherent structure in the data, however, this time it is unsupervised or the data is described with less information. It is useful for visualizing data or simplifying it (which can be later used in a supervised learning method). Some examples are Principal component analysis (PCA), Kernel PCA, Graph-based kernel PCA, Linear discriminant analysis (LDA) and Generalized discriminant analysis (GDA). Source: http://www.bogotobogo.com Association Rule Learning Algorithms are kind of self-explanatory, they extract rules that best explain the relationship between variables in data. These rules can discover important associations that can be exploited. There are two very important algorithms in this category: The Apriori Algorithm and the Eclat Algorithm. Bayesian Algorithms: they use the Bayes‚Äô Theorem, it describes the probability of an event based on prior knowledge of conditions related to the event. Some examples are Naive Bayes, Gaussian Naive Bayes, Multinomial Naive Bayes, Averaged One-Dependence Estimators (AODE), Bayesian Belief Network (BBN) and Bayesian Network (BN). Source: https://www.analyticsvidhya.com In Decision Tree Algorithms the model is constructed by the decisions taken which are based on the values of attributes in the data. The model resembles a tree and includes all possible outcomes, consequences, resource costs and utility. Source: http://www.kdnuggets.com/ Finally we find Instance Based Algorithms; this learning model is a decision problem with instances or examples of training data that are deemed important or required to the model. They usually build up databases of example data and then they are compared to new data using a similarity measure with the aim of creating the best match and in conclusion the best prediction. They are also called memory-based methods and winner-take-all methods. Some examples are k-Nearest Neighbor (kNN), Learning Vector Quantization (LVQ), Self-Organizing Map (SOM) and Locally Weighted Learning (LWL). In a future tutorial I will tell you a methodology for choosing the best algorithm for your problem, for now I would be happy if you understood everything. Here you can download a pdf with most of the algorithms, it is pretty useful as it tells you the code in python and in R (however I know you guys and I‚Äôm sure you will go straight for the python code hehe :P ). Note that it doesn‚Äôt use Tensorflow. https://discuss.analyticsvidhya.com/t/download-full-cheatsheet-on-machine-learning-algorithms/4063 Last of all, I would like to introduce you to some tools/frameworks. I have to say that machine learning is a field which is experiencing a lot of big changes lately, so please if you are reading this in the future bare with me and make a quick google search to make sure this is still valid. The best of all is that there are many open source software so you don‚Äôt have to worry about payments. In my opinion the best tool at the moment is Tensorflow, however, here you can find more options for you to choose. Tensorflow was developed by Google with its initial release in 2015. It is a very powerful tool which has compatibility with most CPUs and GPUs. It supports python and C++. It is gaining a lot of popularity and the community is getting bigger and bigger everyday. You can easilly install it here: https://www.tensorflow.org/install/ Here you can see the popularity that it has gained: Scikit-learn, another big framework doesn‚Äôt support GPUs and is not really suitable for neural networks (also want to note that most of their features were implemented into Tensorflow ;) ). It is free and also works with python, you can get more info and installation instructions in their website: http://scikit-learn.org/stable/index.html Caffe Caffe is a big machine learning framework too, it‚Äôs written in c++ with a python interface. It is better suited for building applications (instead of Tensorflow which is developed for research and development). It‚Äôs not bad at all but I feel like Tensorflow is easier to use. This is their homepage: http://caffe.berkeleyvision.org/ Theano is one of the first frameworks created (it was created in 2007), it follows the Tensorflow style, it does not support multi-GPU nor horizontal capabilities. It uses NumPy to express computations. It is considered a low-end machine learnign frameworks but in reality it‚Äôs is fast and flexible. Due to being old the docs are very well explained. Check it out here: http://deeplearning.net/software/theano/ Keras is object oriented and simple, it uses python and can be used with theano for best performance (can be used with Tensorflow too but it doesn‚Äôt work that good). You can see a comparison of a sample of code of Keras with Tensorflow here: https://gist.github.com/ricgu8086/0ba44ce3aab19ec50425383a4d778b50 For simple building get Keras, if you want more tweaks go to Tensorflow. Check it out here: https://keras.io/ Torch is very famous too, however, it uses Lua, if you are into that go for it (it just isn‚Äôt my case lol). It was used in facebook before they migrated to Tensorflow (if you know what I mean). This is their website: http://torch.ch/ As you can see Tensorflow is the leading software now, it is one of the most powerful ones and not hard to master when you get the hang of it. Another big software is Keras, if you just want to play around with deep learning it‚Äôs probably your option. Obviously this is just some theory; I plan on making more tutorials about machine learning with real examples. However, if you are impatient I will leave you some good links ;) First of all we can find a defcon 25 talk where they apply machine learning for hacking, it‚Äôs pretty interesting, in the talk they don‚Äôt explain anything about coding our model but it will help you imagine how machine learning works better. https://www.youtube.com/watch?v=wbRx18VZlYA Here you can find a lot of resources, there are books, websites, videos, etc. https://my.mindnode.com/k954FWFNztnkphWmNqqHz2dqQW41LeP1SLqkqqjs I found out that a book that I am reading is free online, it‚Äôs not bad and it‚Äôs suitable for university students. The online version is not exactly the same as the paper one, but it is very useful. http://neuron.eng.wayne.edu/synapse2/tpage3.html One of the most famous youtube channels about machine learning is Siraj Raval, he studied computer science and works with python and TensorFlow, it‚Äôs a must-watch. https://www.youtube.com/channel/UCWN3xxRkmTPmbKwht9FuE5A Sentdex is also a famous youtuber who makes coding videos, he also works with python, he has a very interesting project in my opinion: he made a car which drives itself in gta v with machine learning (and he‚Äôs planning on adding even more AI to GTA so stay tunned guys haha). https://www.youtube.com/user/sentdex This is one of my favourites youtubers, Carykh is a bit underrated and he should have way more subscribers in my opinion. Check him out and give it a follow, his videos are very interesting and very well made :) https://www.youtube.com/user/carykh There are way more videos and youtubers online but I think that with these links you can already have some fun! Hope you liked the tutorial and have fun :) https://www.analyticsvidhya.com/blog/2015/08/common-machine-learning-algorithms/ https://machinelearningmastery.com/a-tour-of-machine-learning-algorithms/ https://en.wikipedia.org/wiki/Machine_learning https://my.mindnode.com/k954FWFNztnkphWmNqqHz2dqQW41LeP1SLqkqqjs https://www.codeproject.com/Articles/1104747/Introduction-to-Genetic-Algorithms-with-Python-Hel https://www.analyticsvidhya.com/blog/2016/04/complete-tutorial-tree-based-modeling-scratch-in-python/ https://en.wikipedia.org/wiki/Logistic_regression https://en.coursera.org/learn/machine-learning/lecture/93VPG/k-means-algorithm https://en.wikipedia.org/wiki/Apriori_algorithm https://en.wikipedia.org/wiki/Classification https://en.wikipedia.org/wiki/Regression_analysis http://bigdata-madesimple.com/top-10-machine-learning-frameworks/ https://catalystsecure.com/blog/2017/07/deep-learning-in-e-discovery-moving-past-the-hype/ https://aircto.com/blog/everything-you-need-to-know-about-artificial-neural-network-deep-learning-part-i/ http://magizbox.com/training/machinelearning/site/ensemble/ http://www.kdnuggets.com/2016/08/10-algorithms-machine-learning-engineers.html/2 https://elitedatascience.com/machine-learning-algorithms https://www.analyticsvidhya.com/blog/2015/09/naive-bayes-explained/</summary></entry></feed>